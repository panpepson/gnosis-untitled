/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace GnosisUntitled {
  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface GnosisUntitledInterface extends utils.Interface {
  functions: {
    "EXECUTE_HASH()": FunctionFragment;
    "QUORUM_HASH()": FunctionFragment;
    "SIGNER_HASH()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "execute(address,uint256,bytes,(uint8,bytes32,bytes32)[])": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "quorum()": FunctionFragment;
    "setQuorum(uint256,(uint8,bytes32,bytes32)[])": FunctionFragment;
    "setSigner(address,bool,(uint8,bytes32,bytes32)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXECUTE_HASH"
      | "QUORUM_HASH"
      | "SIGNER_HASH"
      | "domainSeparator"
      | "execute"
      | "isSigner"
      | "nonce"
      | "quorum"
      | "setQuorum"
      | "setSigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXECUTE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUORUM_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNER_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      GnosisUntitled.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [PromiseOrValue<BigNumberish>, GnosisUntitled.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      GnosisUntitled.SignatureStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUORUM_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;

  events: {
    "Executed(address,uint256,bytes)": EventFragment;
    "QuorumUpdated(uint256)": EventFragment;
    "SignerUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerUpdated"): EventFragment;
}

export interface ExecutedEventObject {
  target: string;
  value: BigNumber;
  payload: string;
}
export type ExecutedEvent = TypedEvent<
  [string, BigNumber, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface QuorumUpdatedEventObject {
  newQuorum: BigNumber;
}
export type QuorumUpdatedEvent = TypedEvent<
  [BigNumber],
  QuorumUpdatedEventObject
>;

export type QuorumUpdatedEventFilter = TypedEventFilter<QuorumUpdatedEvent>;

export interface SignerUpdatedEventObject {
  signer: string;
  shouldTrust: boolean;
}
export type SignerUpdatedEvent = TypedEvent<
  [string, boolean],
  SignerUpdatedEventObject
>;

export type SignerUpdatedEventFilter = TypedEventFilter<SignerUpdatedEvent>;

export interface GnosisUntitled extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GnosisUntitledInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXECUTE_HASH(overrides?: CallOverrides): Promise<[string]>;

    QUORUM_HASH(overrides?: CallOverrides): Promise<[string]>;

    SIGNER_HASH(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    execute(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      signer: PromiseOrValue<string>,
      shouldTrust: PromiseOrValue<boolean>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EXECUTE_HASH(overrides?: CallOverrides): Promise<string>;

  QUORUM_HASH(overrides?: CallOverrides): Promise<string>;

  SIGNER_HASH(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  execute(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    sigs: GnosisUntitled.SignatureStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isSigner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  quorum(overrides?: CallOverrides): Promise<BigNumber>;

  setQuorum(
    _quorum: PromiseOrValue<BigNumberish>,
    sigs: GnosisUntitled.SignatureStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    signer: PromiseOrValue<string>,
    shouldTrust: PromiseOrValue<boolean>,
    sigs: GnosisUntitled.SignatureStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXECUTE_HASH(overrides?: CallOverrides): Promise<string>;

    QUORUM_HASH(overrides?: CallOverrides): Promise<string>;

    SIGNER_HASH(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    execute(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      signer: PromiseOrValue<string>,
      shouldTrust: PromiseOrValue<boolean>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Executed(address,uint256,bytes)"(
      target?: null,
      value?: null,
      payload?: null
    ): ExecutedEventFilter;
    Executed(target?: null, value?: null, payload?: null): ExecutedEventFilter;

    "QuorumUpdated(uint256)"(newQuorum?: null): QuorumUpdatedEventFilter;
    QuorumUpdated(newQuorum?: null): QuorumUpdatedEventFilter;

    "SignerUpdated(address,bool)"(
      signer?: PromiseOrValue<string> | null,
      shouldTrust?: null
    ): SignerUpdatedEventFilter;
    SignerUpdated(
      signer?: PromiseOrValue<string> | null,
      shouldTrust?: null
    ): SignerUpdatedEventFilter;
  };

  estimateGas: {
    EXECUTE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    QUORUM_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      signer: PromiseOrValue<string>,
      shouldTrust: PromiseOrValue<boolean>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXECUTE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUORUM_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setQuorum(
      _quorum: PromiseOrValue<BigNumberish>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      signer: PromiseOrValue<string>,
      shouldTrust: PromiseOrValue<boolean>,
      sigs: GnosisUntitled.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
